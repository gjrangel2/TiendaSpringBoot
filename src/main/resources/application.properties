
#spring.application.name=db-test

# MySQL Database Configuration
#spring.datasource.url=jdbc:mysql://localhost:3306/tienda_db?useSSL=false&serverTimezone=UTC
#spring.datasource.username=root
#spring.datasource.password=rangel1991
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#spring.jpa.hibernate.ddl-auto=update

# Configuración para PostgreSQL en Render
# Render inyectará estas variables de entorno automáticamente
# cuando vincules el servicio web con la base de datos.
# src/main/resources/application.properties (para desarrollo local)

# Configuración de la conexión a la base de datos PostgreSQL en Render
spring.datasource.url=jdbc:postgresql://dpg-d110eaqli9vc738961hg-a.oregon-postgres.render.com:5432/tienda_database_m6r7?sslmode=require
spring.datasource.username=root
spring.datasource.password=VHrFUAgfQ5kxY9jNMfUJ8vk1MfoMXIyx

# Comportamiento de Hibernate para la creación/actualización del esquema de la base de datos
# 'update' es útil en desarrollo para que Hibernate cree o modifique tablas automáticamente.
# Para producción, considera 'validate' o 'none' y gestiona el esquema manualmente.
spring.jpa.hibernate.ddl-auto=update

# Mostrar las consultas SQL generadas por Hibernate en la consola.
# Muy útil para depuración.
spring.jpa.show-sql=true

# Especificar el dialecto de la base de datos PostgreSQL.
# Aunque Spring Boot a menudo lo detecta automáticamente, es buena práctica explicitarlo.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Puerto en el que se ejecutará tu aplicación Spring Boot.
server.port=8080

# Configuración recomendada para despliegues, especialmente en entornos de nube como Render.
# Ayuda a prevenir problemas con la carga perezosa de datos (lazy loading) y transacciones.
spring.jpa.open-in-view=false